-- Minimal change: add PK + AUTO for missing tables, then rename only the first 't' to 'T' in table names.
-- No unrelated deletes/changes. Views are repointed to new names.

SET SQL_MODE = 'NO_AUTO_VALUE_ON_ZERO';
SET time_zone = '+00:00';
/*!40101 SET NAMES utf8mb4 */;

USE `cy_arena_db`;

START TRANSACTION;

-- 1) Add PRIMARY KEY + AUTO_INCREMENT เฉพาะตารางที่ยังไม่มี (อ้างอิงจากดัมพ์)
-- booking_status
ALTER TABLE `tbl_booking_status`
  ADD PRIMARY KEY (`BookingStatusID`);
ALTER TABLE `tbl_booking_status`
  MODIFY `BookingStatusID` INT(11) NOT NULL AUTO_INCREMENT;

-- payment_status
ALTER TABLE `tbl_payment_status`
  ADD PRIMARY KEY (`PaymentStatusID`);
ALTER TABLE `tbl_payment_status`
  MODIFY `PaymentStatusID` INT(11) NOT NULL AUTO_INCREMENT;

-- role
ALTER TABLE `tbl_role`
  ADD PRIMARY KEY (`RoleID`);
ALTER TABLE `tbl_role`
  MODIFY `RoleID` INT(11) NOT NULL AUTO_INCREMENT;

-- employee
ALTER TABLE `tbl_employee`
  ADD PRIMARY KEY (`EmployeeID`);
ALTER TABLE `tbl_employee`
  MODIFY `EmployeeID` INT(11) NOT NULL AUTO_INCREMENT;

-- promotion  (มีแถว id=0 อยู่ จึงใช้ NO_AUTO_VALUE_ON_ZERO ด้านบนเพื่อคงค่า 0 ได้)
ALTER TABLE `tbl_promotion`
  ADD PRIMARY KEY (`PromotionID`);
ALTER TABLE `tbl_promotion`
  MODIFY `PromotionID` INT(11) NOT NULL AUTO_INCREMENT;

-- (จากดัมพ์: tbl_booking, tbl_customer, tbl_review, tbl_venue, tbl_venue_type มี PK+AUTO อยู่แล้ว)

-- 2) เปลี่ยนชื่อ “เฉพาะตัวอักษรแรก t → T” ของทุกตาราง
RENAME TABLE
  `tbl_booking`        TO `Tbl_booking`,
  `tbl_booking_status` TO `Tbl_booking_status`,
  `tbl_customer`       TO `Tbl_customer`,
  `tbl_employee`       TO `Tbl_employee`,
  `tbl_payment_status` TO `Tbl_payment_status`,
  `tbl_promotion`      TO `Tbl_promotion`,
  `tbl_review`         TO `Tbl_review`,
  `tbl_role`           TO `Tbl_role`,
  `tbl_venue`          TO `Tbl_venue`,
  `tbl_venue_type`     TO `Tbl_venue_type`;

-- 3) อัปเดต VIEW ให้ชี้ชื่อใหม่ (ไม่ลบสิ่งอื่นที่ไม่เกี่ยวข้อง)
CREATE OR REPLACE VIEW `vw_booking_funnel` AS
SELECT bs.StatusName AS booking_status,
       ps.StatusName AS payment_status,
       COUNT(0) AS cnt
FROM Tbl_booking b
JOIN Tbl_booking_status bs ON bs.BookingStatusID = b.BookingStatusID
JOIN Tbl_payment_status ps ON ps.PaymentStatusID = b.PaymentStatusID
GROUP BY bs.StatusName, ps.StatusName
ORDER BY bs.StatusName ASC, ps.StatusName ASC;

CREATE OR REPLACE VIEW `vw_customer_ltv` AS
SELECT c.CustomerID,
       CONCAT(c.FirstName,' ',c.LastName) AS customer_name,
       COUNT(b.BookingID) AS total_bookings,
       SUM(b.TotalPrice) AS total_revenue,
       AVG(b.TotalPrice) AS avg_order_value,
       MIN(b.StartTime) AS first_booking_at,
       MAX(b.StartTime) AS last_booking_at,
       TO_DAYS(CURDATE()) - TO_DAYS(MAX(b.StartTime)) AS recency_days
FROM Tbl_customer c
LEFT JOIN Tbl_booking b ON b.CustomerID = c.CustomerID
LEFT JOIN Tbl_booking_status bs ON bs.BookingStatusID = b.BookingStatusID
LEFT JOIN Tbl_payment_status ps ON ps.PaymentStatusID = b.PaymentStatusID
  AND bs.StatusName IN ('ยืนยันแล้ว','เข้าใช้บริการแล้ว')
  AND ps.StatusName = 'ชำระเงินสำเร็จ'
GROUP BY c.CustomerID, CONCAT(c.FirstName,' ',c.LastName)
ORDER BY SUM(b.TotalPrice) DESC;

CREATE OR REPLACE VIEW `vw_employee_performance` AS
SELECT e.EmployeeID,
       e.FirstName AS employee_name,
       COUNT(b.BookingID) AS handled_bookings,
       SUM(CASE WHEN ps.StatusName = 'ชำระเงินสำเร็จ' THEN b.TotalPrice ELSE 0 END) AS revenue_approved,
       MIN(b.StartTime) AS first_booking_at,
       MAX(b.StartTime) AS last_booking_at
FROM Tbl_employee e
LEFT JOIN Tbl_booking b ON b.EmployeeID = e.EmployeeID
LEFT JOIN Tbl_payment_status ps ON ps.PaymentStatusID = b.PaymentStatusID
GROUP BY e.EmployeeID, e.FirstName
ORDER BY SUM(CASE WHEN ps.StatusName = 'ชำระเงินสำเร็จ' THEN b.TotalPrice ELSE 0 END) DESC;

CREATE OR REPLACE VIEW `vw_monthly_cancellation_rate` AS
SELECT DATE_FORMAT(b.StartTime,'%Y-%m') AS ym,
       COUNT(0) AS total_bookings,
       SUM(CASE WHEN bs.StatusName IN ('ยกเลิกโดยลูกค้า','ยกเลิกโดยระบบ') THEN 1 ELSE 0 END) AS cancelled,
       ROUND(100.0 * SUM(CASE WHEN bs.StatusName IN ('ยกเลิกโดยลูกค้า','ยกเลิกโดยระบบ') THEN 1 ELSE 0 END) / COUNT(0), 2) AS cancel_rate_pct
FROM Tbl_booking b
JOIN Tbl_booking_status bs ON bs.BookingStatusID = b.BookingStatusID
GROUP BY DATE_FORMAT(b.StartTime,'%Y-%m')
ORDER BY DATE_FORMAT(b.StartTime,'%Y-%m') ASC;

CREATE OR REPLACE VIEW `vw_monthly_revenue` AS
SELECT DATE_FORMAT(b.StartTime,'%Y-%m') AS ym,
       SUM(b.TotalPrice) AS revenue,
       COUNT(0) AS bookings,
       AVG(b.TotalPrice) AS avg_order_value
FROM Tbl_booking b
JOIN Tbl_booking_status bs ON bs.BookingStatusID = b.BookingStatusID
JOIN Tbl_payment_status ps ON ps.PaymentStatusID = b.PaymentStatusID
WHERE bs.StatusName IN ('ยืนยันแล้ว','เข้าใช้บริการแล้ว')
  AND ps.StatusName = 'ชำระเงินสำเร็จ'
GROUP BY DATE_FORMAT(b.StartTime,'%Y-%m')
ORDER BY DATE_FORMAT(b.StartTime,'%Y-%m') ASC;

CREATE OR REPLACE VIEW `vw_peak_hours_by_type` AS
SELECT vt.TypeName,
       HOUR(b.StartTime) AS hour_of_day,
       COUNT(0) AS bookings,
       ROW_NUMBER() OVER (PARTITION BY vt.TypeName ORDER BY COUNT(0) DESC) AS rn_in_type
FROM Tbl_booking b
JOIN Tbl_venue v ON v.VenueID = b.VenueID
JOIN Tbl_venue_type vt ON vt.VenueTypeID = v.VenueTypeID
JOIN Tbl_booking_status bs ON bs.BookingStatusID = b.BookingStatusID
WHERE bs.StatusName IN ('ยืนยันแล้ว','เข้าใช้บริการแล้ว')
GROUP BY vt.TypeName, HOUR(b.StartTime)
ORDER BY vt.TypeName ASC, COUNT(0) DESC;

CREATE OR REPLACE VIEW `vw_promotion_performance` AS
SELECT p.PromotionID,
       p.PromoCode AS promo_code,
       COUNT(b.BookingID) AS uses_count,
       COALESCE(SUM(CASE WHEN bs.StatusName IN ('ยืนยันแล้ว','เข้าใช้บริการแล้ว') AND ps.StatusName = 'ชำระเงินสำเร็จ' THEN b.NetPrice ELSE 0 END),0) AS revenue_from_promo,
       MIN(b.StartTime) AS first_used_at,
       MAX(b.StartTime) AS last_used_at
FROM Tbl_promotion p
LEFT JOIN Tbl_booking b ON b.PromotionID = p.PromotionID
LEFT JOIN Tbl_booking_status bs ON bs.BookingStatusID = b.BookingStatusID
LEFT JOIN Tbl_payment_status ps ON ps.PaymentStatusID = b.PaymentStatusID
GROUP BY p.PromotionID, p.PromoCode
ORDER BY COUNT(b.BookingID) DESC,
         COALESCE(SUM(CASE WHEN bs.StatusName IN ('ยืนยันแล้ว','เข้าใช้บริการแล้ว') AND ps.StatusName = 'ชำระเงินสำเร็จ' THEN b.NetPrice ELSE 0 END),0) DESC;

CREATE OR REPLACE VIEW `vw_review_scores_by_venue` AS
SELECT v.VenueID,
       v.VenueName,
       COUNT(r.ReviewID) AS reviews_count,
       AVG(r.Rating) AS avg_rating,
       MIN(r.CreatedAt) AS first_review_at,
       MAX(r.CreatedAt) AS last_review_at
FROM Tbl_venue v
LEFT JOIN Tbl_review r ON r.VenueID = v.VenueID
GROUP BY v.VenueID, v.VenueName
ORDER BY AVG(r.Rating) DESC, COUNT(r.ReviewID) DESC;

CREATE OR REPLACE VIEW `vw_top10_venues_by_revenue` AS
SELECT x.VenueID, x.VenueName, x.revenue_90d, x.bookings_90d, x.rn
FROM (
  SELECT
    v.VenueID,
    v.VenueName,
    ROUND(COALESCE(SUM(CASE
      WHEN b.StartTime >= CURDATE() - INTERVAL 90 DAY
           AND b.BookingStatusID = 1
           AND b.PaymentStatusID = 1
      THEN b.NetPrice ELSE 0 END),0),2) AS revenue_90d,
    COALESCE(SUM(CASE
      WHEN b.StartTime >= CURDATE() - INTERVAL 90 DAY
           AND b.BookingStatusID = 1
           AND b.PaymentStatusID = 1
      THEN 1 ELSE 0 END),0) AS bookings_90d,
    ROW_NUMBER() OVER (
      ORDER BY SUM(CASE
        WHEN b.StartTime >= CURDATE() - INTERVAL 90 DAY
             AND b.BookingStatusID = 1
             AND b.PaymentStatusID = 1
        THEN b.NetPrice ELSE 0 END) DESC,
      v.VenueName
    ) AS rn
  FROM Tbl_venue v
  LEFT JOIN Tbl_booking b ON b.VenueID = v.VenueID
  GROUP BY v.VenueID, v.VenueName
) AS x
WHERE x.rn <= 10;

CREATE OR REPLACE VIEW `vw_venue_utilization_daily` AS
WITH bookings_daily AS (
  SELECT
    b.VenueID,
    CAST(b.StartTime AS DATE) AS usage_date,
    ROUND(SUM(CASE WHEN b.BookingStatusID = 1 AND b.PaymentStatusID = 1 THEN b.HoursBooked ELSE 0 END), 2) AS booked_hours
  FROM Tbl_booking b
  GROUP BY b.VenueID, CAST(b.StartTime AS DATE)
)
SELECT
  v.VenueName,
  d.usage_date,
  COALESCE(d.booked_hours, 0) AS booked_hours,
  24 AS open_hours,
  ROUND(COALESCE(d.booked_hours, 0) / 24 * 100, 2) AS utilization_pct
FROM bookings_daily d
JOIN Tbl_venue v ON v.VenueID = d.VenueID;

COMMIT;
